{"version":3,"file":"index.js","sources":["src/config.js","src/resource.js","src/default-resolver.js","src/fetch-resources-for-products.js","src/paginators.js","src/product-helpers.js","src/product-resource.js","src/collection-resource.js","src/shop-resource.js","src/handle-checkout-mutation.js","src/checkout-resource.js","src/image-helpers.js","src/image-resource.js","src/client.js"],"sourcesContent":["/**\n * The class used to configure the JS Buy SDK Client.\n * @class\n */\nclass Config {\n\n  /**\n   * Properties that must be set on initializations\n   * @attribute requiredProperties\n   * @default ['storefrontAccessToken', 'domain']\n   * @type Array\n   * @private\n   */\n  get requiredProperties() {\n    return [\n      'storefrontAccessToken',\n      'domain'\n    ];\n  }\n\n  /**\n   * Deprecated properties that map directly to required properties\n   * @attribute deprecatedProperties\n   * @default {'accessToken': 'storefrontAccessToken', 'apiKey': 'storefrontAccessToken'}\n   * @type Object\n   * @private\n   */\n  get deprecatedProperties() {\n    return {\n      accessToken: 'storefrontAccessToken',\n      apiKey: 'storefrontAccessToken'\n    };\n  }\n\n  /**\n   * @constructs Config\n   * @param {Object} attrs An object specifying the configuration. Requires the following properties:\n   *   @param {String} attrs.storefrontAccessToken The {@link https://help.shopify.com/api/reference/storefront_access_token|Storefront access token} for the shop.\n   *   @param {String} attrs.domain The `myshopify` domain for the shop (e.g. `graphql.myshopify.com`).\n   */\n  constructor(attrs) {\n    Object.keys(this.deprecatedProperties).forEach((key) => {\n      if (!attrs.hasOwnProperty(key)) { return; }\n      // eslint-disable-next-line no-console\n      console.warn(`[ShopifyBuy] Config property ${key} is deprecated as of v1.0, please use ${this.deprecatedProperties[key]} instead.`);\n      attrs[this.deprecatedProperties[key]] = attrs[key];\n    });\n\n    this.requiredProperties.forEach((key) => {\n      if (attrs.hasOwnProperty(key)) {\n        this[key] = attrs[key];\n      } else {\n        throw new Error(`new Config() requires the option '${key}'`);\n      }\n    });\n  }\n}\n\nexport default Config;\n","export default class Resource {\n  constructor(client) {\n    this.graphQLClient = client;\n  }\n}\n","export const defaultErrors = [{message: 'an unknown error has occured.'}];\n\nexport default function defaultResolver(path) {\n  const keys = path.split('.');\n\n  return function(response) {\n    const {model, errors} =  response;\n\n    return new Promise((resolve, reject) => {\n      try {\n        const result = keys.reduce((ref, key) => {\n          return ref[key];\n        }, model);\n\n        resolve(result);\n      } catch (_) {\n        if (errors) {\n          reject(response);\n        } else {\n          reject(defaultErrors);\n        }\n      }\n    });\n  };\n}\n","export default function fetchResourcesForProducts(productOrProduct, client) {\n  const products = [].concat(productOrProduct);\n\n  return Promise.all(products.reduce((promiseAcc, product) => {\n    // Fetch the rest of the images and variants for this product\n    promiseAcc.push(client.fetchAllPages(product.images, {pageSize: 250}).then((images) => {\n      product.attrs.images = images;\n    }));\n\n    promiseAcc.push(client.fetchAllPages(product.variants, {pageSize: 250}).then((variants) => {\n      product.attrs.variants = variants;\n    }));\n\n    return promiseAcc;\n  }, []));\n}\n","import fetchResourcesForProducts from './fetch-resources-for-products';\n\nexport function paginateProductConnectionsAndResolve(client) {\n  return function(products) {\n    return fetchResourcesForProducts(products, client).then(() => {\n      return products;\n    });\n  };\n}\n\nexport function paginateCollectionsProductConnectionsAndResolve(client) {\n  return function(collectionOrCollections) {\n    const collections = [].concat(collectionOrCollections);\n\n    return Promise.all(collections.reduce((promiseAcc, collection) => {\n      return promiseAcc.concat(fetchResourcesForProducts(collection.products, client));\n    }, [])).then(() => {\n      return collectionOrCollections;\n    });\n  };\n}\n","/**\n * @namespace ProductHelpers\n */\nexport default {\n\n  /**\n   * Returns the variant of a product corresponding to the options given.\n   *\n   * @example\n   * const selectedVariant = client.product.variantForOptions(product, {\n   *   size: \"Small\",\n   *   color: \"Red\"\n   * });\n   *\n   * @memberof ProductHelpers\n   * @method variantForOptions\n   * @param {GraphModel} product The product to find the variant on. Must include `variants`.\n   * @param {Object} options An object containing the options for the variant.\n   * @return {GraphModel} The variant corresponding to the options given.\n   */\n  variantForOptions(product, options) {\n    return product.variants.find((variant) => {\n      return variant.selectedOptions.every((selectedOption) => {\n        return options[selectedOption.name] === selectedOption.value.valueOf();\n      });\n    });\n  }\n};\n","import Resource from './resource';\nimport defaultResolver from './default-resolver';\nimport {paginateProductConnectionsAndResolve} from './paginators';\nimport productHelpers from './product-helpers';\n\n// GraphQL\nimport productNodeQuery from './graphql/productNodeQuery.graphql';\nimport productNodesQuery from './graphql/productNodesQuery.graphql';\nimport productConnectionQuery from './graphql/productConnectionQuery.graphql';\nimport productByHandleQuery from './graphql/productByHandleQuery.graphql';\n\n/**\n * The JS Buy SDK product resource\n * @class\n */\nclass ProductResource extends Resource {\n  get helpers() {\n    return productHelpers;\n  }\n\n  /**\n   * Fetches all products on the shop.\n   *\n   * @example\n   * client.product.fetchAll().then((products) => {\n   *   // Do something with the products\n   * });\n   *\n   * @param {Int} [pageSize] The number of products to fetch per page\n   * @return {Promise|GraphModel[]} A promise resolving with an array of `GraphModel`s of the products.\n   */\n  fetchAll(first = 20) {\n    return this.graphQLClient\n      .send(productConnectionQuery, {first})\n      .then(defaultResolver('shop.products'))\n      .then(paginateProductConnectionsAndResolve(this.graphQLClient));\n  }\n\n  /**\n   * Fetches a single product by ID on the shop.\n   *\n   * @example\n   * client.product.fetch('Xk9lM2JkNzFmNzIQ4NTIY4ZDFi9DaGVja291dC9lM2JkN==').then((product) => {\n   *   // Do something with the product\n   * });\n   *\n   * @param {String} id The id of the product to fetch.\n   * @return {Promise|GraphModel} A promise resolving with a `GraphModel` of the product.\n   */\n  fetch(id) {\n    return this.graphQLClient\n      .send(productNodeQuery, {id})\n      .then(defaultResolver('node'))\n      .then(paginateProductConnectionsAndResolve(this.graphQLClient));\n  }\n\n  /**\n   * Fetches multiple products by ID on the shop.\n   *\n   * @example\n   * const ids = ['Xk9lM2JkNzFmNzIQ4NTIY4ZDFi9DaGVja291dC9lM2JkN==', 'Z2lkOi8vc2hvcGlmeS9Qcm9kdWN0Lzc4NTc5ODkzODQ='];\n   * client.product.fetchMultiple(ids).then((products) => {\n   *   // Do something with the products\n   * });\n   *\n   * @param {String[]} ids The ids of the products to fetch\n   * @return {Promise|GraphModel[]} A promise resolving with a `GraphModel` of the product.\n   */\n  fetchMultiple(ids) {\n    return this.graphQLClient\n      .send(productNodesQuery, {ids})\n      .then(defaultResolver('nodes'))\n      .then(paginateProductConnectionsAndResolve(this.graphQLClient));\n  }\n\n  /**\n   * Fetches a single product by handle on the shop.\n   *\n   * @example\n   * client.product.fetchByHandle('my-product').then((product) => {\n   *   // Do something with the product\n   * });\n   *\n   * @param {String} handle The handle of the product to fetch.\n   * @return {Promise|GraphModel} A promise resolving with a `GraphModel` of the product.\n   */\n  fetchByHandle(handle) {\n    return this.graphQLClient\n      .send(productByHandleQuery, {handle})\n      .then(defaultResolver('shop.productByHandle'))\n      .then(paginateProductConnectionsAndResolve(this.graphQLClient));\n  }\n\n  /**\n   * Fetches all products on the shop that match the query.\n   *\n   * @example\n   * client.product.fetchQuery({first: 20, sortKey: 'CREATED_AT', reverse: true}).then((products) => {\n   *   // Do something with the first 10 products sorted by title in ascending order\n   * });\n   *\n   * @param {Object} [args] An object specifying the query data containing zero or more of:\n   *   @param {Int} [args.first=20] The relay `first` param. This specifies page size.\n   *   @param {String} [args.sortKey=ID] The key to sort results by. Available values are\n   *   documented as {@link https://help.shopify.com/api/storefront-api/reference/enum/productsortkeys|Product Sort Keys}.\n   *   @param {String} [args.query] A query string. See full documentation {@link https://help.shopify.com/api/storefront-api/reference/object/shop#products|here}\n   *   @param {Boolean} [args.reverse] Whether or not to reverse the sort order of the results\n   * @return {Promise|GraphModel[]} A promise resolving with an array of `GraphModel`s of the products.\n   */\n  fetchQuery({first = 20, sortKey = 'ID', query, reverse} = {}) {\n    return this.graphQLClient\n      .send(productConnectionQuery, {\n        first,\n        sortKey,\n        query,\n        reverse\n      })\n      .then(defaultResolver('shop.products'))\n      .then(paginateProductConnectionsAndResolve(this.graphQLClient));\n  }\n}\n\nexport default ProductResource;\n","import Resource from './resource';\nimport defaultResolver from './default-resolver';\nimport {paginateCollectionsProductConnectionsAndResolve} from './paginators';\n\n// GraphQL\nimport collectionNodeQuery from './graphql/collectionNodeQuery.graphql';\nimport collectionNodeWithProductsQuery from './graphql/collectionNodeWithProductsQuery.graphql';\nimport collectionConnectionQuery from './graphql/collectionConnectionQuery.graphql';\nimport collectionConnectionWithProductsQuery from './graphql/collectionConnectionWithProductsQuery.graphql';\nimport collectionByHandleQuery from './graphql/collectionByHandleQuery.graphql';\n\n/**\n * The JS Buy SDK collection resource\n * @class\n */\nclass CollectionResource extends Resource {\n\n  /**\n   * Fetches all collections on the shop, not including products.\n   * To fetch collections with products use [fetchAllsWithProducts]{@link Client#fetchAllsWithProducts}.\n   *\n   * @example\n   * client.collection.fetchAll().then((collections) => {\n   *   // Do something with the collections\n   * });\n   *\n   * @return {Promise|GraphModel[]} A promise resolving with an array of `GraphModel`s of the collections.\n   */\n  fetchAll(first = 20) {\n    return this.graphQLClient\n      .send(collectionConnectionQuery, {first})\n      .then(defaultResolver('shop.collections'));\n  }\n\n  /**\n   * Fetches all collections on the shop, including products.\n   *\n   * @example\n   * client.collection.fetchAllWithProducts().then((collections) => {\n   *   // Do something with the collections\n   * });\n   *\n   * @return {Promise|GraphModel[]} A promise resolving with an array of `GraphModel`s of the collections.\n   */\n  fetchAllWithProducts({first = 20, productsFirst = 20} = {}) {\n    return this.graphQLClient\n      .send(collectionConnectionWithProductsQuery, {first, productsFirst})\n      .then(defaultResolver('shop.collections'))\n      .then(paginateCollectionsProductConnectionsAndResolve(this.graphQLClient));\n  }\n\n  /**\n   * Fetches a single collection by ID on the shop, not including products.\n   * To fetch the collection with products use [fetchWithProducts]{@link Client#fetchWithProducts}.\n   *\n   * @example\n   * client.collection.fetch('Xk9lM2JkNzFmNzIQ4NTIY4ZDFiZTUyZTUwNTE2MDNhZjg==').then((collection) => {\n   *   // Do something with the collection\n   * });\n   *\n   * @param {String} id The id of the collection to fetch.\n   * @return {Promise|GraphModel} A promise resolving with a `GraphModel` of the collection.\n   */\n  fetch(id) {\n    return this.graphQLClient\n      .send(collectionNodeQuery, {id})\n      .then(defaultResolver('node'));\n  }\n\n  /**\n   * Fetches a single collection by ID on the shop, including products.\n   *\n   * @example\n   * client.collection.fetchWithProducts('Xk9lM2JkNzFmNzIQ4NTIY4ZDFiZTUyZTUwNTE2MDNhZjg==').then((collection) => {\n   *   // Do something with the collection\n   * });\n   *\n   * @param {String} id The id of the collection to fetch.\n   * @return {Promise|GraphModel} A promise resolving with a `GraphModel` of the collection.\n   */\n  fetchWithProducts(id) {\n    return this.graphQLClient\n      .send(collectionNodeWithProductsQuery, {id})\n      .then(defaultResolver('node'))\n      .then(paginateCollectionsProductConnectionsAndResolve(this.graphQLClient));\n  }\n\n  /**\n   * Fetches a collection by handle on the shop.\n   *\n   * @example\n   * client.collection.fetchByHandle('my-collection').then((collection) => {\n   *   // Do something with the collection\n   * });\n   *\n   * @param {String} handle The handle of the collection to fetch.\n   * @return {Promise|GraphModel} A promise resolving with a `GraphModel` of the collection.\n   */\n  fetchByHandle(handle) {\n    return this.graphQLClient\n      .send(collectionByHandleQuery, {handle})\n      .then(defaultResolver('shop.collectionByHandle'));\n  }\n\n  /**\n   * Fetches all collections on the shop that match the query.\n   *\n   * @example\n   * client.collection.fetchQuery({first: 20, sortKey: 'CREATED_AT', reverse: true}).then((collections) => {\n   *   // Do something with the first 10 collections sorted by title in ascending order\n   * });\n   *\n   * @param {Object} [args] An object specifying the query data containing zero or more of:\n   *   @param {Int} [args.first=20] The relay `first` param. This specifies page size.\n   *   @param {String} [args.sortKey=ID] The key to sort results by. Available values are\n   *   documented as {@link https://help.shopify.com/api/storefront-api/reference/enum/collectionsortkeys|Collection Sort Keys}.\n   *   @param {String} [args.query] A query string. See full documentation {@link https://help.shopify.com/api/storefront-api/reference/object/shop#collections|here}\n   *   @param {Boolean} [args.reverse] Whether or not to reverse the sort order of the results\n   * @return {Promise|GraphModel[]} A promise resolving with an array of `GraphModel`s of the collections.\n   */\n  fetchQuery({first = 20, sortKey = 'ID', query, reverse} = {}) {\n    return this.graphQLClient.send(collectionConnectionQuery, {\n      first,\n      sortKey,\n      query,\n      reverse\n    }).then(defaultResolver('shop.collections'));\n  }\n}\nexport default CollectionResource;\n","import Resource from './resource';\nimport defaultResolver from './default-resolver';\n\n// GraphQL\nimport shopQuery from './graphql/shopQuery.graphql';\nimport shopPolicyQuery from './graphql/shopPolicyQuery.graphql';\n\n/**\n * The JS Buy SDK shop resource\n * @class\n */\nclass ShopResource extends Resource {\n\n  /**\n   * Fetches shop information (`currencyCode`, `description`, `moneyFormat`, `name`, and `primaryDomain`).\n   * See the {@link https://help.shopify.com/api/storefront-api/reference/object/shop|Storefront API reference} for more information.\n   *\n   * @example\n   * client.shop.fetchInfo().then((shop) => {\n   *   // Do something with the shop\n   * });\n   *\n   * @return {Promise|GraphModel} A promise resolving with a `GraphModel` of the shop.\n   */\n  fetchInfo() {\n    return this.graphQLClient\n      .send(shopQuery)\n      .then(defaultResolver('shop'));\n  }\n\n  /**\n   * Fetches shop policies (privacy policy, terms of service and refund policy).\n   *\n   * @example\n   * client.shop.fetchPolicies().then((shop) => {\n   *   // Do something with the shop\n   * });\n   *\n   * @return {Promise|GraphModel} A promise resolving with a `GraphModel` of the shop.\n   */\n  fetchPolicies() {\n    return this.graphQLClient\n      .send(shopPolicyQuery)\n      .then(defaultResolver('shop'));\n  }\n}\n\nexport default ShopResource;\n","export default function handleCheckoutMutation(mutationRootKey, client) {\n  return function({data, errors, model}) {\n    const rootData = data[mutationRootKey];\n    const rootModel = model[mutationRootKey];\n\n    if (rootData && rootData.checkout) {\n      return client.fetchAllPages(rootModel.checkout.lineItems, {pageSize: 250}).then((lineItems) => {\n        rootModel.checkout.attrs.lineItems = lineItems;\n        rootModel.checkout.errors = errors;\n        rootModel.checkout.userErrors = rootModel.userErrors;\n\n        return rootModel.checkout;\n      });\n    }\n\n    if (errors && errors.length) {\n      return Promise.reject(new Error(JSON.stringify(errors)));\n    }\n\n    if (rootData && rootData.userErrors && rootData.userErrors.length) {\n      return Promise.reject(new Error(JSON.stringify(rootData.userErrors)));\n    }\n\n    return Promise.reject(new Error(`The ${mutationRootKey} mutation failed due to an unknown error.`));\n  };\n}\n","import Resource from './resource';\nimport defaultResolver from './default-resolver';\nimport handleCheckoutMutation from './handle-checkout-mutation';\n\n// GraphQL\nimport checkoutNodeQuery from './graphql/checkoutNodeQuery.graphql';\nimport checkoutCreateMutation from './graphql/checkoutCreateMutation.graphql';\nimport checkoutLineItemsAddMutation from './graphql/checkoutLineItemsAddMutation.graphql';\nimport checkoutLineItemsRemoveMutation from './graphql/checkoutLineItemsRemoveMutation.graphql';\nimport checkoutLineItemsUpdateMutation from './graphql/checkoutLineItemsUpdateMutation.graphql';\n\n/**\n * The JS Buy SDK checkout resource\n * @class\n */\nclass CheckoutResource extends Resource {\n\n  /**\n   * Fetches a checkout by ID.\n   *\n   * @example\n   * client.checkout.fetch('FlZj9rZXlN5MDY4ZDFiZTUyZTUwNTE2MDNhZjg=').then((checkout) => {\n   *   // Do something with the checkout\n   * });\n   *\n   * @param {String} id The id of the checkout to fetch.\n   * @return {Promise|GraphModel} A promise resolving with a `GraphModel` of the checkout.\n   */\n  fetch(id) {\n    return this.graphQLClient\n      .send(checkoutNodeQuery, {id})\n      .then(defaultResolver('node'))\n      .then((checkout) => {\n        return this.graphQLClient.fetchAllPages(checkout.lineItems, {pageSize: 250}).then((lineItems) => {\n          checkout.attrs.lineItems = lineItems;\n\n          return checkout;\n        });\n      });\n  }\n\n  /**\n   * Creates a checkout.\n   *\n   * @example\n   * const input = {\n   *   lineItems: [\n   *     {variantId: 'Z2lkOi8vc2hvcGlmeS9Qcm9kdWN0VmFyaWFudC8yOTEwNjAyMjc5Mg==', quantity: 5}\n   *   ]\n   * };\n   *\n   * client.checkout.create(input).then((checkout) => {\n   *   // Do something with the newly created checkout\n   * });\n   *\n   * @param {Object} [input] An input object containing zero or more of:\n   *   @param {String} [input.email] An email connected to the checkout.\n   *   @param {Object[]} [input.lineItems] A list of line items in the checkout. See the {@link https://help.shopify.com/api/storefront-api/reference/input_object/checkoutlineiteminput|Storefront API reference} for valid input fields for each line item.\n   *   @param {Object} [input.shippingAddress] A shipping address. See the {@link https://help.shopify.com/api/storefront-api/reference/input_object/mailingaddressinput|Storefront API reference} for valid input fields.\n   *   @param {String} [input.note] A note for the checkout.\n   *   @param {Object[]} [input.customAttributes] A list of custom attributes for the checkout. See the {@link https://help.shopify.com/api/storefront-api/reference/input_object/attributeinput|Storefront API reference} for valid input fields.\n   * @return {Promise|GraphModel} A promise resolving with the created checkout.\n   */\n  create(input = {}) {\n    return this.graphQLClient\n      .send(checkoutCreateMutation, {input})\n      .then(handleCheckoutMutation('checkoutCreate', this.graphQLClient));\n  }\n\n  /**\n   * Adds line items to an existing checkout.\n   *\n   * @example\n   * const checkoutId = 'Z2lkOi8vc2hvcGlmeS9DaGVja291dC9kMTZmM2EzMDM4Yjc4N=';\n   * const lineItems = [{variantId: 'Z2lkOi8vc2hvcGlmeS9Qcm9kdWN0VmFyaWFudC8yOTEwNjAyMjc5Mg==', quantity: 5}];\n   *\n   * client.checkout.addLineItems(checkoutId, lineItems).then((checkout) => {\n   *   // Do something with the updated checkout\n   * });\n   *\n   * @param {String} checkoutId The ID of the checkout to add line items to.\n   * @param {Object[]} lineItems A list of line items to add to the checkout. See the {@link https://help.shopify.com/api/storefront-api/reference/input_object/checkoutlineiteminput|Storefront API reference} for valid input fields for each line item.\n   * @return {Promise|GraphModel} A promise resolving with the updated checkout.\n   */\n  addLineItems(checkoutId, lineItems) {\n    return this.graphQLClient\n      .send(checkoutLineItemsAddMutation, {checkoutId, lineItems})\n      .then(handleCheckoutMutation('checkoutLineItemsAdd', this.graphQLClient));\n  }\n\n  /**\n   * Removes line items from an existing checkout.\n   *\n   * @example\n   * const checkoutId = 'Z2lkOi8vc2hvcGlmeS9DaGVja291dC9kMTZmM2EzMDM4Yjc4N=';\n   * const lineItemIds = ['TViZGE5Y2U1ZDFhY2FiMmM2YT9rZXk9NTc2YjBhODcwNWIxYzg0YjE5ZjRmZGQ5NjczNGVkZGU='];\n   *\n   * client.checkout.removeLineItems(checkoutId, lineItemIds).then((checkout) => {\n   *   // Do something with the updated checkout\n   * });\n   *\n   * @param {String} checkoutId The ID of the checkout to remove line items from.\n   * @param {String[]} lineItemIds A list of the ids of line items to remove from the checkout.\n   * @return {Promise|GraphModel} A promise resolving with the updated checkout.\n   */\n  removeLineItems(checkoutId, lineItemIds) {\n    return this.graphQLClient\n      .send(checkoutLineItemsRemoveMutation, {checkoutId, lineItemIds})\n      .then(handleCheckoutMutation('checkoutLineItemsRemove', this.graphQLClient));\n  }\n\n  /**\n   * Updates line items on an existing checkout.\n   *\n   * @example\n   * const checkoutId = 'Z2lkOi8vc2hvcGlmeS9DaGVja291dC9kMTZmM2EzMDM4Yjc4N=';\n   * const lineItems = [\n   *   {\n   *     id: 'TViZGE5Y2U1ZDFhY2FiMmM2YT9rZXk9NTc2YjBhODcwNWIxYzg0YjE5ZjRmZGQ5NjczNGVkZGU=',\n   *     quantity: 5,\n   *     variantId: 'Z2lkOi8vc2hvcGlmeS9Qcm9kdWN0VmFyaWFudC8yOTEwNjAyMjc5Mg=='\n   *   }\n   * ];\n   *\n   * client.checkout.updateLineItems(checkoutId, lineItems).then(checkout => {\n   *   // Do something with the updated checkout\n   * });\n   *\n   * @param {String} checkoutId The ID of the checkout to update a line item on.\n   * @param {Object[]} lineItems A list of line item information to update. See the {@link https://help.shopify.com/api/storefront-api/reference/input_object/checkoutlineitemupdateinput|Storefront API reference} for valid input fields for each line item.\n   * @return {Promise|GraphModel} A promise resolving with the updated checkout.\n   */\n  updateLineItems(checkoutId, lineItems) {\n    return this.graphQLClient\n      .send(checkoutLineItemsUpdateMutation, {checkoutId, lineItems})\n      .then(handleCheckoutMutation('checkoutLineItemsUpdate', this.graphQLClient));\n  }\n}\n\nexport default CheckoutResource;\n","/**\n * @namespace ImageHelpers\n */\nexport default {\n\n  /**\n   * Generates the image src for a resized image with maximum dimensions `maxWidth` and `maxHeight`.\n   * Images do not scale up.\n   *\n   * @example\n   * const url = client.image.helpers.imageForSize(product.variants[0].image, {maxWidth: 50, maxHeight: 50});\n   *\n   * @memberof ImageHelpers\n   * @method imageForSize\n   * @param {Object} image The original image model to generate the image src for.\n   * @param {Object} options An options object containing:\n   *  @param {Integer} options.maxWidth The maximum width for the image.\n   *  @param {Integer} options.maxHeight The maximum height for the image.\n   * @return {String} The image src for the resized image.\n   */\n  imageForSize(image, {maxWidth, maxHeight}) {\n    const splitUrl = image.src.split('?');\n    const notQuery = splitUrl[0];\n    const query = splitUrl[1] ? `?${splitUrl[1]}` : '';\n\n    // Use the section before the query\n    const imageTokens = notQuery.split('.');\n\n    // Take the token before the file extension and append the dimensions\n    const imagePathIndex = imageTokens.length - 2;\n\n    imageTokens[imagePathIndex] = `${imageTokens[imagePathIndex]}_${maxWidth}x${maxHeight}`;\n\n    return `${imageTokens.join('.')}${query}`;\n  }\n};\n","import Resource from './resource';\nimport imageHelpers from './image-helpers';\n\n/**\n * The JS Buy SDK image resource\n * @class\n */\nclass ImageResource extends Resource {\n  get helpers() {\n    return imageHelpers;\n  }\n}\n\nexport default ImageResource;\n","import GraphQLJSClient from './graphql-client';\nimport Config from './config';\nimport ProductResource from './product-resource';\nimport CollectionResource from './collection-resource';\nimport ShopResource from './shop-resource';\nimport CheckoutResource from './checkout-resource';\nimport ImageResource from './image-resource';\nimport {version} from '../package.json';\n\n// GraphQL\nimport types from '../schema.json';\n\n/**\n * The JS Buy SDK Client.\n * @class\n *\n * @property {ProductResource} product The property under which product fetching methods live.\n * @property {CollectionResource} collection The property under which collection fetching methods live.\n * @property {ShopResource} shop The property under which shop fetching methods live.\n * @property {CheckoutResource} checkout The property under which shop fetching and mutating methods live.\n * @property {ImageResource} image The property under which image helper methods live.\n */\nclass Client {\n\n  /**\n   * Primary entry point for building a new Client.\n   */\n  static buildClient(config, fetchFunction) {\n    const newConfig = new Config(config);\n    const client = new Client(newConfig, GraphQLJSClient, fetchFunction);\n\n    client.config = newConfig;\n\n    return client;\n  }\n\n  /**\n   * @constructs Client\n   * @param {Config} config An instance of {@link Config} used to configure the Client.\n   */\n  constructor(config, GraphQLClientClass = GraphQLJSClient, fetchFunction) {\n    const url = `https://${config.domain}/api/graphql`;\n\n    const headers = {\n      'X-SDK-Variant': 'javascript',\n      'X-SDK-Version': version,\n      'X-Shopify-Storefront-Access-Token': config.storefrontAccessToken\n    };\n\n    if (fetchFunction) {\n      headers['Content-Type'] = 'application/json';\n      headers.Accept = 'application/json';\n\n      this.graphQLClient = new GraphQLClientClass(types, {\n        fetcher: function fetcher(graphQLParams) {\n          return fetchFunction(url, {\n            body: JSON.stringify(graphQLParams),\n            method: 'POST',\n            mode: 'cors',\n            headers\n          }).then((response) => response.json());\n        }\n      });\n    } else {\n      this.graphQLClient = new GraphQLClientClass(types, {\n        url,\n        fetcherOptions: {headers}\n      });\n    }\n\n    this.product = new ProductResource(this.graphQLClient);\n    this.collection = new CollectionResource(this.graphQLClient);\n    this.shop = new ShopResource(this.graphQLClient);\n    this.checkout = new CheckoutResource(this.graphQLClient);\n    this.image = new ImageResource(this.graphQLClient);\n  }\n\n  /**\n   * Fetches the next page of models\n   *\n   * @example\n   * client.fetchNextPage(products).then((nextProducts) => {\n   *   // Do something with the products\n   * });\n   *\n   * @param {models} [Array] The paginated set to fetch the next page of\n   * @return {Promise|GraphModel[]} A promise resolving with an array of `GraphModel`s of the type provided.\n   */\n  fetchNextPage(models) {\n    return this.graphQLClient.fetchNextPage(models);\n  }\n}\n\nexport default Client;\n"],"names":["Config","attrs","keys","deprecatedProperties","forEach","key","hasOwnProperty","warn","requiredProperties","Error","Resource","client","graphQLClient","defaultErrors","message","defaultResolver","path","split","response","model","errors","Promise","resolve","reject","result","reduce","ref","_","fetchResourcesForProducts","productOrProduct","products","concat","all","promiseAcc","product","push","fetchAllPages","images","pageSize","then","variants","paginateProductConnectionsAndResolve","paginateCollectionsProductConnectionsAndResolve","collectionOrCollections","collections","collection","options","find","variant","selectedOptions","every","selectedOption","name","value","valueOf","ProductResource","first","send","productConnectionQuery","id","productNodeQuery","ids","productNodesQuery","handle","productByHandleQuery","sortKey","query","reverse","productHelpers","CollectionResource","collectionConnectionQuery","productsFirst","collectionConnectionWithProductsQuery","collectionNodeQuery","collectionNodeWithProductsQuery","collectionByHandleQuery","ShopResource","shopQuery","shopPolicyQuery","handleCheckoutMutation","mutationRootKey","data","rootData","rootModel","checkout","lineItems","userErrors","length","JSON","stringify","CheckoutResource","checkoutNodeQuery","input","checkoutCreateMutation","checkoutId","checkoutLineItemsAddMutation","lineItemIds","checkoutLineItemsRemoveMutation","checkoutLineItemsUpdateMutation","image","maxWidth","maxHeight","splitUrl","src","notQuery","imageTokens","imagePathIndex","join","ImageResource","imageHelpers","Client","config","fetchFunction","newConfig","GraphQLJSClient","GraphQLClientClass","url","domain","headers","version","storefrontAccessToken","Accept","types","fetcher","graphQLParams","json","shop","models","fetchNextPage"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;IAIMA;;;;;;;;;;;;2BASqB;aAChB,CACL,uBADK,EAEL,QAFK,CAAP;;;;;;;;;;;;;2BAayB;aAClB;qBACQ,uBADR;gBAEG;OAFV;;;;;;;;;;;;kBAYUC,KAAZ,EAAmB;;;;;WACVC,IAAP,CAAY,KAAKC,oBAAjB,EAAuCC,OAAvC,CAA+C,UAACC,GAAD,EAAS;UAClD,CAACJ,MAAMK,cAAN,CAAqBD,GAArB,CAAL,EAAgC;;;;cAExBE,IAAR,mCAA6CF,GAA7C,8CAAyF,MAAKF,oBAAL,CAA0BE,GAA1B,CAAzF;YACM,MAAKF,oBAAL,CAA0BE,GAA1B,CAAN,IAAwCJ,MAAMI,GAAN,CAAxC;KAJF;;SAOKG,kBAAL,CAAwBJ,OAAxB,CAAgC,UAACC,GAAD,EAAS;UACnCJ,MAAMK,cAAN,CAAqBD,GAArB,CAAJ,EAA+B;cACxBA,GAAL,IAAYJ,MAAMI,GAAN,CAAZ;OADF,MAEO;cACC,IAAII,KAAJ,yCAA+CJ,GAA/C,QAAN;;KAJJ;;;;;;IChDiBK,WACnB,kBAAYC,MAAZ,EAAoB;;;OACbC,aAAL,GAAqBD,MAArB;;;ACFG,IAAME,gBAAgB,CAAC,EAACC,SAAS,+BAAV,EAAD,CAAtB;;AAEP,AAAe,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;MACtCd,OAAOc,KAAKC,KAAL,CAAW,GAAX,CAAb;;SAEO,UAASC,QAAT,EAAmB;QACjBC,KADiB,GACCD,QADD,CACjBC,KADiB;QACVC,MADU,GACCF,QADD,CACVE,MADU;;;WAGjB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;UAClC;YACIC,SAAStB,KAAKuB,MAAL,CAAY,UAACC,GAAD,EAAMrB,GAAN,EAAc;iBAChCqB,IAAIrB,GAAJ,CAAP;SADa,EAEZc,KAFY,CAAf;;gBAIQK,MAAR;OALF,CAME,OAAOG,CAAP,EAAU;YACNP,MAAJ,EAAY;iBACHF,QAAP;SADF,MAEO;iBACEL,aAAP;;;KAXC,CAAP;GAHF;;;ACLa,SAASe,yBAAT,CAAmCC,gBAAnC,EAAqDlB,MAArD,EAA6D;MACpEmB,WAAW,GAAGC,MAAH,CAAUF,gBAAV,CAAjB;;SAEOR,QAAQW,GAAR,CAAYF,SAASL,MAAT,CAAgB,UAACQ,UAAD,EAAaC,OAAb,EAAyB;;eAE/CC,IAAX,CAAgBxB,OAAOyB,aAAP,CAAqBF,QAAQG,MAA7B,EAAqC,EAACC,UAAU,GAAX,EAArC,EAAsDC,IAAtD,CAA2D,UAACF,MAAD,EAAY;cAC7EpC,KAAR,CAAcoC,MAAd,GAAuBA,MAAvB;KADc,CAAhB;;eAIWF,IAAX,CAAgBxB,OAAOyB,aAAP,CAAqBF,QAAQM,QAA7B,EAAuC,EAACF,UAAU,GAAX,EAAvC,EAAwDC,IAAxD,CAA6D,UAACC,QAAD,EAAc;cACjFvC,KAAR,CAAcuC,QAAd,GAAyBA,QAAzB;KADc,CAAhB;;WAIOP,UAAP;GAViB,EAWhB,EAXgB,CAAZ,CAAP;;;ACDK,SAASQ,oCAAT,CAA8C9B,MAA9C,EAAsD;SACpD,UAASmB,QAAT,EAAmB;WACjBF,0BAA0BE,QAA1B,EAAoCnB,MAApC,EAA4C4B,IAA5C,CAAiD,YAAM;aACrDT,QAAP;KADK,CAAP;GADF;;;AAOF,AAAO,SAASY,+CAAT,CAAyD/B,MAAzD,EAAiE;SAC/D,UAASgC,uBAAT,EAAkC;QACjCC,cAAc,GAAGb,MAAH,CAAUY,uBAAV,CAApB;;WAEOtB,QAAQW,GAAR,CAAYY,YAAYnB,MAAZ,CAAmB,UAACQ,UAAD,EAAaY,UAAb,EAA4B;aACzDZ,WAAWF,MAAX,CAAkBH,0BAA0BiB,WAAWf,QAArC,EAA+CnB,MAA/C,CAAlB,CAAP;KADiB,EAEhB,EAFgB,CAAZ,EAEC4B,IAFD,CAEM,YAAM;aACVI,uBAAP;KAHK,CAAP;GAHF;;;ACXF;;;AAGA,qBAAe;;;;;;;;;;;;;;;;;mBAAA,6BAiBKT,OAjBL,EAiBcY,OAjBd,EAiBuB;WAC3BZ,QAAQM,QAAR,CAAiBO,IAAjB,CAAsB,UAACC,OAAD,EAAa;aACjCA,QAAQC,eAAR,CAAwBC,KAAxB,CAA8B,UAACC,cAAD,EAAoB;eAChDL,QAAQK,eAAeC,IAAvB,MAAiCD,eAAeE,KAAf,CAAqBC,OAArB,EAAxC;OADK,CAAP;KADK,CAAP;;CAlBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACEA;AACA,AAKA;;;;;IAIMC;;;;;;;;;;;;;;;;;;;;;;;+BAgBiB;UAAZC,KAAY,uEAAJ,EAAI;;aACZ,KAAK5C,aAAL,CACJ6C,IADI,CACCC,OADD,EACyB,EAACF,YAAD,EADzB,EAEJjB,IAFI,CAECxB,gBAAgB,eAAhB,CAFD,EAGJwB,IAHI,CAGCE,qCAAqC,KAAK7B,aAA1C,CAHD,CAAP;;;;;;;;;;;;;;;;;0BAiBI+C,IAAI;aACD,KAAK/C,aAAL,CACJ6C,IADI,CACCG,KADD,EACmB,EAACD,MAAD,EADnB,EAEJpB,IAFI,CAECxB,gBAAgB,MAAhB,CAFD,EAGJwB,IAHI,CAGCE,qCAAqC,KAAK7B,aAA1C,CAHD,CAAP;;;;;;;;;;;;;;;;;;kCAkBYiD,KAAK;aACV,KAAKjD,aAAL,CACJ6C,IADI,CACCK,OADD,EACoB,EAACD,QAAD,EADpB,EAEJtB,IAFI,CAECxB,gBAAgB,OAAhB,CAFD,EAGJwB,IAHI,CAGCE,qCAAqC,KAAK7B,aAA1C,CAHD,CAAP;;;;;;;;;;;;;;;;;kCAiBYmD,QAAQ;aACb,KAAKnD,aAAL,CACJ6C,IADI,CACCO,OADD,EACuB,EAACD,cAAD,EADvB,EAEJxB,IAFI,CAECxB,gBAAgB,sBAAhB,CAFD,EAGJwB,IAHI,CAGCE,qCAAqC,KAAK7B,aAA1C,CAHD,CAAP;;;;;;;;;;;;;;;;;;;;;;iCAsB4D;qFAAJ,EAAI;4BAAlD4C,KAAkD;UAAlDA,KAAkD,8BAA1C,EAA0C;8BAAtCS,OAAsC;UAAtCA,OAAsC,gCAA5B,IAA4B;UAAtBC,QAAsB,QAAtBA,KAAsB;UAAfC,OAAe,QAAfA,OAAe;;aACrD,KAAKvD,aAAL,CACJ6C,IADI,CACCC,OADD,EACyB;oBAAA;wBAAA;uBAAA;;OADzB,EAOJnB,IAPI,CAOCxB,gBAAgB,eAAhB,CAPD,EAQJwB,IARI,CAQCE,qCAAqC,KAAK7B,aAA1C,CARD,CAAP;;;;2BA9FY;aACLwD,caiB;UAAZb,KAAY,uEAAJ,EAAI;;aACZ,KAAK5C,aAAL,CACJ6C,IADI,CACCa,OADD,EAC4B,EAACd,YAAD,EAD5B,EAEJjB,IAFI,CAECxB,gBAAgB,kBAAhB,CAFD,CAAP;;;;;;;;;;;;;;;;2CAe0D;qFAAJ,EAAI;4BAAtCyC,KAAsC;UAAtCA,KAAsC,8BAA9B,EAA8B;oCAA1Be,aAA0B;UAA1BA,aAA0B,sCAAV,EAAU;;aACnD,KAAK3D,aAAL,CACJ6C,IADI,CACCe,OADD,EACwC,EAAChB,YAAD,EAAQe,4BAAR,EADxC,EAEJhC,IAFI,CAECxB,gBAAgB,kBAAhB,CAFD,EAGJwB,IAHI,CAGCG,gDAAgD,KAAK9B,aAArD,CAHD,CAAP;;;;;;;;;;;;;;;;;;0BAkBI+C,IAAI;aACD,KAAK/C,aAAL,CACJ6C,IADI,CACCgB,OADD,EACsB,EAACd,MAAD,EADtB,EAEJpB,IAFI,CAECxB,gBAAgB,MAAhB,CAFD,CAAP;;;;;;;;;;;;;;;;;sCAgBgB4C,IAAI;aACb,KAAK/C,aAAL,CACJ6C,IADI,CACCiB,OADD,EACkC,EAACf,MAAD,EADlC,EAEJpB,IAFI,CAECxB,gBAAgB,MAAhB,CAFD,EAGJwB,IAHI,CAGCG,gDAAgD,KAAK9B,aAArD,CAHD,CAAP;;;;;;;;;;;;;;;;;kCAiBYmD,QAAQ;aACb,KAAKnD,aAAL,CACJ6C,IADI,CACCkB,OADD,EAC0B,EAACZ,cAAD,EAD1B,EAEJxB,IAFI,CAECxB,gBAAgB,yBAAhB,CAFD,CAAP;;;;;;;;;;;;;;;;;;;;;;iCAqB4D;sFAAJ,EAAI;8BAAlDyC,KAAkD;UAAlDA,KAAkD,+BAA1C,EAA0C;gCAAtCS,OAAsC;UAAtCA,OAAsC,iCAA5B,IAA4B;UAAtBC,KAAsB,SAAtBA,KAAsB;UAAfC,OAAe,SAAfA,OAAe;;aACrD,KAAKvD,aAAL,CAAmB6C,IAAnB,CAAwBa,OAAxB,EAAmD;oBAAA;wBAAA;oBAAA;;OAAnD,EAKJ/B,IALI,CAKCxB,gBAAgB,kBAAhB,CALD,CAAP;;;;EA1G6BL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZjC;AACA,AAGA;;;;;IAIMkE;;;;;;;;;;;;;;;;;;;;;;;gCAaQ;aACH,KAAKhE,aAAL,CACJ6C,IADI,CACCoB,OADD,EAEJtC,IAFI,CAECxB,gBAAgB,MAAhB,CAFD,CAAP;;;;;;;;;;;;;;;;oCAec;aACP,KAAKH,aAAL,CACJ6C,IADI,CACCqB,QADD,EAEJvC,IAFI,CAECxB,gBAAgB,MAAhB,CAFD,CAAP;;;;EA9BuBL;;ACXZ,SAASqE,sBAAT,CAAgCC,eAAhC,EAAiDrE,MAAjD,EAAyD;SAC/D,gBAAgC;QAAtBsE,IAAsB,QAAtBA,IAAsB;QAAhB7D,MAAgB,QAAhBA,MAAgB;QAARD,KAAQ,QAARA,KAAQ;;QAC/B+D,WAAWD,KAAKD,eAAL,CAAjB;QACMG,YAAYhE,MAAM6D,eAAN,CAAlB;;QAEIE,YAAYA,SAASE,QAAzB,EAAmC;aAC1BzE,OAAOyB,aAAP,CAAqB+C,UAAUC,QAAV,CAAmBC,SAAxC,EAAmD,EAAC/C,UAAU,GAAX,EAAnD,EAAoEC,IAApE,CAAyE,UAAC8C,SAAD,EAAe;kBACnFD,QAAV,CAAmBnF,KAAnB,CAAyBoF,SAAzB,GAAqCA,SAArC;kBACUD,QAAV,CAAmBhE,MAAnB,GAA4BA,MAA5B;kBACUgE,QAAV,CAAmBE,UAAnB,GAAgCH,UAAUG,UAA1C;;eAEOH,UAAUC,QAAjB;OALK,CAAP;;;QASEhE,UAAUA,OAAOmE,MAArB,EAA6B;aACpBlE,QAAQE,MAAR,CAAe,IAAId,KAAJ,CAAU+E,KAAKC,SAAL,CAAerE,MAAf,CAAV,CAAf,CAAP;;;QAGE8D,YAAYA,SAASI,UAArB,IAAmCJ,SAASI,UAAT,CAAoBC,MAA3D,EAAmE;aAC1DlE,QAAQE,MAAR,CAAe,IAAId,KAAJ,CAAU+E,KAAKC,SAAL,CAAeP,SAASI,UAAxB,CAAV,CAAf,CAAP;;;WAGKjE,QAAQE,MAAR,CAAe,IAAId,KAAJ,UAAiBuE,eAAjB,+CAAf,CAAP;GAtaE/B,IAAI;;;aACD,KAAK/C,aAAL,CACJ6C,IADI,CACCkC,QADD,EACoB,EAAChC,MAAD,EADpB,EAEJpB,IAFI,CAECxB,gBAAgB,MAAhB,CAFD,EAGJwB,IAHI,CAGC,UAAC6C,QAAD,EAAc;eACX,OAAKxE,aAAL,CAAmBwB,aAAnB,CAAiCgD,SAASC,SAA1C,EAAqD,EAAC/C,UAAU,GAAX,EAArD,EAAsEC,IAAtE,CAA2E,UAAC8C,SAAD,EAAe;mBACtFpF,KAAT,CAAeoF,SAAf,GAA2BA,SAA3B;;iBAEOD,QAAP;SAHK,CAAP;OAJG,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAkCiB;UAAZQ,KAAY,uEAAJ,EAAI;;aACV,KAAKhF,aAAL,CACJ6C,IADI,CACCoC,QADD,EACyB,EAACD,YAAD,EADzB,EAEJrD,IAFI,CAECwC,uBAAuB,gBAAvB,EAAyC,KAAKnE,aAA9C,CAFD,CAAP;;;;;;;;;;;;;;;;;;;;;iCAoBWkF,YAAYT,WAAW;aAC3B,KAAKzE,aAAL,CACJ6C,IADI,CACCsC,QADD,EAC+B,EAACD,sBAAD,EAAaT,oBAAb,EAD/B,EAEJ9C,IAFI,CAECwC,uBAAuB,sBAAvB,EAA+C,KAAKnE,aAApD,CAFD,CAAP;;;;;;;;;;;;;;;;;;;;;oCAoBckF,YAAYE,aAAa;aAChC,KAAKpF,aAAL,CACJ6C,IADI,CACCwC,QADD,EACkC,EAACH,sBAAD,EAAaE,wBAAb,EADlC,EAEJzD,IAFI,CAECwC,uBAAuB,yBAAvB,EAAkD,KAAKnE,aAAvD,CAFD,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;oCA0BckF,YAAYT,WAAW;aAC9B,KAAKzE,aAAL,CACJ6C,IADI,CACCyC,QADD,EACkC,EAACJ,sBAAD,EAAaT,oBAAb,EADlC,EAEJ9C,IAFI,CAECwC,uBAAuB,yBAAvB,EAAkD,KAAKnE,aAAvD,CAFD,CAAP;;;;EAtH2BF;;ACf/B;;;AAGA,mBAAe;;;;;;;;;;;;;;;;;cAAA,wBAiBAyF,KAjBA,QAiB8B;QAAtBC,QAAsB,QAAtBA,QAAsB;QAAZC,SAAY,QAAZA,SAAY;;QACnCC,WAAWH,MAAMI,GAAN,CAAUtF,KAAV,CAAgB,GAAhB,CAAjB;QACMuF,WAAWF,SAAS,CAAT,CAAjB;QACMpC,QAAQoC,SAAS,CAAT,UAAkBA,SAAS,CAAT,CAAlB,GAAkC,EAAhD;;;QAGMG,cAAcD,SAASvF,KAAT,CAAe,GAAf,CAApB;;;QAGMyF,iBAAiBD,YAAYlB,MAAZ,GAAqB,CAA5C;;gBAEYmB,cAAZ,IAAiCD,YAAYC,cAAZ,CAAjC,SAAgEN,QAAhE,SAA4EC,SAA5E;;gBAEUI,YAAYE,IAAZ,CAAiB,GAAjB,CAAV,GAAkCzC,KAAlC;;CA9BJ;;ACAA;;;;;IAIM0C;;;;;;;;;;2BACU;aACLC,YAAP;;;;EAFwBnoG;;;;;;;;gCAKeC,QAAQC,eAAe;UAClCC,YAAY,IAAIjH,MAAJ,CAAW+G,MAAX,CAAlB;UACMpG,SAAS,IAAImG,MAAJ,CAAWG,SAAX,EAAsBC,eAAtB,EAAuCF,aAAvC,CAAf;;aAEOD,MAAP,GAAgBE,SAAhB;;aAEOtG,MAAP;;;;;;;;;;kBAOUoG,MAAZ,EAAyE;QAArDI,kBAAqD,uEAAhCD,eAAgC;QAAfF,aAAe;;;QACjEI,mBAAiBL,OAAOM,MAAxB,iBAAN;;QAEMC,UAAU;uBACG,YADH;uBAEGC,OAFH;2CAGuBR,OAAOS;KAH9C;;QAMIR,aAAJ,EAAmB;cACT,cAAR,IAA0B,kBAA1B;cACQS,MAAR,GAAiB,kBAAjB;;WAEK7G,aAAL,GAAqB,IAAIuG,kBAAJ,CAAuBO,KAAvB,EAA8B;iBACxC,SAASC,OAAT,CAAiBC,aAAjB,EAAgC;iBAChCZ,cAAcI,GAAd,EAAmB;kBAClB5B,KAAKC,SAAL,CAAemC,aAAf,CADkB;oBAEhB,MAFgB;kBAGlB,MAHkB;;WAAnB,EAKJrF,IALI,CAKC,UAACrB,QAAD;mBAAcA,SAAS2G,IAAT,EAAd;WALD,CAAP;;OAFiB,CAArB;KAJF,MAcO;WACAjH,aAAL,GAAqB,IAAIuG,kBAAJ,CAAuBO,KAAvB,EAA8B;gBAAA;wBAEjC,EAACJ,gBAAD;OAFG,CAArB;;;SAMGpF,OAAL,GAAe,IAAIqB,eAAJ,CAAoB,KAAK3C,aAAzB,CAAf;SACKiC,UAAL,GAAkB,IAAIwB,kBAAJ,CAAuB,KAAKzD,aAA5B,CAAlB;SACKkH,IAAL,GAAY,IAAIlD,YAAJ,CAAiB,KAAKhE,aAAtB,CAAZ;SACKwE,QAAL,GAAgB,IAAIM,gBAAJ,CAAqB,KAAK9E,aAA1B,CAAhB;SACKuF,KAAL,GAAa,IAAIS,aAAJ,CAAkB,KAAKhG,aAAvB,CAAb;;;;;;;;;;;;;;;;;;kCAcYmH,QAAQ;aACb,KAAKnH,aAAL,CAAmBoH,aAAnB,CAAiCD,MAAjC,CAAP;;;;;;;;"}